let config = require("./config.json");
let fakeInfo = require("./fake-info.json");

// Module imports
let fs = require("fs");
let os = require("os");
let handlebars = require("handlebars");
const path = require("path");
let uuid = require("uuid").v4;
let chalk = require("chalk");

let child_process = require("child_process");

// Functions
function generateMacAddress() {
    return "XX:XX:XX:XX:XX:XX".replace(/X/g, function() {
        return "0123456789ABCDEF".charAt(Math.floor(Math.random() * 16))
    });
}

function generateUuid() {
    return uuid();
}

function generateSerial(leadingStr = "", followingDigits = 0, alphanumeric = false) {
    let letters = "abcdefghijklmnopqrstuvwxyz".split("");
    let numbers = "1234567890".split("");

    let serialBuilder = leadingStr;

    while(serialBuilder.length !== (leadingStr.length + followingDigits)) {
        if(alphanumeric) {
            let ballot = Math.round(Math.random());

            if(ballot === 0) {
                serialBuilder += getRandomValue(letters);
            } else {
                serialBuilder += getRandomValue(numbers);
            }
        } else {
            serialBuilder += getRandomValue(numbers);
        }
    }

    return serialBuilder.toUpperCase();
}

function getRandomValue(array = []) {
    let length = array.length;
    let luckyNumber = Math.floor(Math.random() * length);

    return array[luckyNumber];
}

function generateRandomDate() {
    let date = new Date(+(new Date()) - Math.floor(Math.random() * 155000000000));

    // Should never be in the future, is yes, reset
    while(date >= Date.now()) {
        date = new Date(+(new Date()) - Math.floor(Math.random() * 155000000000));
    }

    return date;
}

function generateRandomNumber(max) {
    return Math.floor(Math.random() * max);
}

// Workings
let name = generateSerial("Win10-", 4, false);
let disk_size = config.disk_size_gb;
let ram_size = config.ram_size_mb;
let hard_disk_name = generateSerial("HDD-", 4, false);
let host_only_adapter = config.host_only_network;
let bridged_adapter = config.bridged_network;

let hard_disk_path = path.resolve(__dirname, hard_disk_name);
let windows_iso_path = path.resolve(__dirname, config.windows_iso_name);
let vbox_script_path = path.resolve(__dirname, config.vbox_script_template_name);
let vm_init_script_path = path.resolve(__dirname, config.vm_init_script_template_name);
let step_2_script_path = path.resolve(__dirname, config.step_2_template_name);
let rm_trace_script_path = path.resolve(__dirname, config.rm_trace_template_name);
let working_files_path = path.resolve(__dirname, "working_files");

let vendor = getRandomValue(fakeInfo.manufacturer);
let dmiBiosVersion = [
    generateSerial("MB", 2, false),
    generateSerial("", 3, true),
    generateSerial("", 4, false),
    generateSerial("B", 2, false),
    generateSerial("", 10, false)
].join(".");

let dmiBiosReleaseDate = (new generateRandomDate()).toLocaleDateString("en-GB", {
    year: "2-digit",
    month: "2-digit",
    day: "2-digit"
})

let dmiBiosReleaseMajor = generateRandomNumber(10);
let dmiBiosReleaseMinor = 0;
let dmiBiosFirmwareMajor = generateRandomNumber(6);
let dmiBiosFirmwareMinor = 1;
let dmiSystemProduct = getRandomValue(fakeInfo.systemProduct);
let dmiSystemVersion = generateRandomNumber(10);
let dmiSystemSerial = generateSerial("CSN", 17, false);
let dmiSystemSku = generateSerial("SY", 9, true);
let dmiSystemFamily = getRandomValue(fakeInfo.systemFamily);
let dmiSystemUuid = generateUuid().toString().toUpperCase();
let dmiBoardProduct = generateSerial("B", 7, true);
let dmiBoardVersion = generateRandomNumber(5);
let dmiBoardSerial = generateSerial("BSN", 17, false);
let dmiBoardAssetTag = getRandomValue(fakeInfo.misc);
let dmiBoardLocInChass = getRandomValue(fakeInfo.misc);
let dmiBoardBoardType = generateRandomNumber(10);
let dmiChassisType = generateRandomNumber(10);
let dmiChassisVersion = generateSerial("C", 7, true);
let dmiChassisSerial = generateSerial("CSN", 17, false);
let dmiChassisAssetTag = dmiChassisSerial;
let dmiOemVBoxVer = generateRandomNumber(5);
let dmiOemVBoxRev = generateRandomNumber(10);
let modelNumber0 = getRandomValue(fakeInfo.model);
let firmwareVersion0 = generateSerial("ES", 6, true);
let serialNumber0 = generateSerial("", 14, true);
let modelNumber1 = getRandomValue(fakeInfo.model);
let firmwareVersion1 = generateSerial("F", 3, true);
let serialNumber1 = generateSerial("", 16, true);
let atapiVendorId = getRandomValue(fakeInfo.misc);
let atapiProductId = getRandomValue(fakeInfo.model);
let atapiRevision = firmwareVersion1;

let macAddress = generateMacAddress().replace(/:/g, "",).toUpperCase();
let projectPath = path.resolve(__dirname, config.project_path);

let setConfigs = {
    name,
    disk_size,
    ram_size,
    hard_disk_path,
    windows_iso_path,
    vbox_script_path,
    vendor,
    dmiBiosVersion,
    dmiBiosReleaseDate,
    dmiBiosReleaseMajor,
    dmiBiosReleaseMinor,
    dmiBiosFirmwareMajor,
    dmiBiosFirmwareMinor,
    dmiSystemProduct,
    dmiSystemVersion,
    dmiSystemSerial,
    dmiSystemSku,
    dmiSystemFamily,
    dmiSystemUuid,
    dmiBoardProduct,
    dmiBoardVersion,
    dmiBoardSerial,
    dmiBoardAssetTag,
    dmiBoardLocInChass,
    dmiBoardBoardType,
    dmiChassisType,
    dmiChassisVersion,
    dmiChassisSerial,
    dmiChassisAssetTag,
    dmiOemVBoxVer,
    dmiOemVBoxRev,
    modelNumber0,
    firmwareVersion0,
    serialNumber0,
    modelNumber1,
    firmwareVersion1,
    serialNumber1,
    atapiVendorId,
    atapiProductId,
    atapiRevision,
    macAddress,
    projectPath,
    hostOnly: host_only_adapter
}

console.log(chalk.green("Compiling vm_init_script.sh"));

let vm_init_script_template = fs.readFileSync(vm_init_script_path).toString("utf-8");
let vm_init_script = handlebars.compile(vm_init_script_template);
let vm_init_script_compiled = vm_init_script({
    diskName: hard_disk_name,
    diskSize: disk_size * 1024,
    hardDiskPath: hard_disk_path,
    name: name,
    ramSize: config.ram_size_mb,
    cpuCores: os.cpus().length / 2,
    windowsIsoPath: windows_iso_path,
    dmiSystemUuid: dmiSystemUuid.toLowerCase(),
    projectPath
});

console.log(chalk.green("Compiling vbox_script.sh"));

let vbox_script_template = fs.readFileSync(vbox_script_path).toString("utf-8");
let vbox_script = handlebars.compile(vbox_script_template);
let vbox_script_compiled = vbox_script(setConfigs);

console.log(chalk.green("Compiling rm_trace.ps1"));

let rm_trace_template = fs.readFileSync(rm_trace_script_path).toString("utf-8");
let rm_trace_script = handlebars.compile(rm_trace_template);
let rm_trace_compiled = rm_trace_script({
    vendor,
    dmiBiosReleaseDate
})

fs.writeFileSync(path.resolve(__dirname, "vbox_script.sh"), vbox_script_compiled);
fs.writeFileSync(path.resolve(__dirname, "vm_init_script.sh"), vm_init_script_compiled);
fs.writeFileSync(path.resolve(__dirname, "working_files/rm-trace.ps1"), rm_trace_compiled);

console.log(chalk.green("Setting appropriate permissions"));
child_process.exec(`chmod a+x ${path.resolve(__dirname, "vm_init_script.sh")}`);
child_process.exec(`chmod a+x ${path.resolve(__dirname, "vbox_script.sh")}`);

console.log(chalk.blue("Start vm_init_script.sh"));
let initRunner = child_process.spawn("bash", [
    "-e",
    path.resolve(__dirname, "vm_init_script.sh")
]);

initRunner.stdout.setEncoding("utf-8");

initRunner.stdout.on("data", (chunk) => {
    console.log(chunk.toString());
});

console.log(chalk.bgBlue("Continue with Windows 10 installation."));
console.log(chalk.bold.blue("Exit VM after finish setting up account, then press any key to continue next step..."));

child_process.spawnSync("read _ ", {shell: true, stdio: [0, 1, 2]});

// Begin phase 2

// Create ISO from folder working_files
console.log(chalk.green("Create ISO from folder working_files..."));

child_process.spawn("genisoimage", [
    "-J",
    "-R",
    "-l",
    "-o",
    "working_files.iso",
    working_files_path
]);

console.log(chalk.green("Compiling Step 2"));

let step_2_template = fs.readFileSync(step_2_script_path).toString("utf-8");
let step_2_script = handlebars.compile(step_2_template);
let step_2_compiled = step_2_script({
    name,
    macAddress,
    atapiVendorId,
    atapiProductId,
    atapiRevision,
    projectPath,
    bridgedNetwork: bridged_adapter
});

fs.writeFileSync(path.resolve(__dirname, "step_2_script.sh"), step_2_compiled);

console.log(chalk.green("Setting appropriate permissions"));
child_process.exec(`chmod a+x ${path.resolve(__dirname, "step_2_script.sh")}`);

console.log(chalk.blue("Start step_2_script.sh"));
let step2Runner = child_process.spawn("bash", [
    "-e",
    path.resolve(__dirname, "step_2_script.sh")
]);

step2Runner.stdout.setEncoding("utf-8");

step2Runner.stdout.on("data", (chunk) => {
    console.log(chunk.toString());
});

console.log(chalk.green("Cleaning up..."));
fs.unlinkSync(path.resolve(__dirname, "vbox_script.sh"));
fs.unlinkSync(path.resolve(__dirname, "vm_init_script.sh"));
fs.unlinkSync(path.resolve(__dirname, "step_2_script.sh"));
fs.unlinkSync(path.resolve(__dirname, "working_files/rm-trace.ps1"));

console.log(chalk.green("Done."));



